ThinkPHP5使用文档
    1. 通过php自带的WebServer，并且运行router.php来运行测试
        php -S localhost:8888 router.php
        接下来可以直接访问http://localhost:8888

    2. 5.0版本采用模块化的设计架构，默认的应用目录下面只有一个index模块目录，如果我要添加新的模块可以使用控制台命令
    来生成。
        切换到命令行模式下，进入到应用根目录并执行命令
        php think build --module demo
        就会生成一个默认的demo模块

    3. 开启或关闭调试模式
        修改配置文件config.php中的app_debug配置
            'app_debug' =>  true|false

    4. url访问
        4.1 标准的URL访问格式：
            http://servername/index.php/模块/控制器/操作
        4.2 如果开启了"url_convert" => true 即大小写转换，url中的模块、控制器、操作可以不区分大小写
        4.3 驼峰格式的控制器 在url访问中应该将其转换为下划线的形式的名称(HelloWord控制器 的访问形式 ---》index.php/index/hello_word/index )
        4.4 如果希望严格区分大小写访问（或者要支持驼峰法进行控制器访问），可以在应用配置文件中设置：
            "url_convert" => false
            注意：模块的文件夹名称 必须是小写字母

    5.定义路由
        如果我们想要简化url地址的写法，可以在 application/route.php 里面添加一些路由规则
        eg1:
            retrun [
                'hello/:name' => 'index/index/hello',
            ]
            该规则表示所有hello开头的并且带有参数的访问都会路由到index模块的index控制器的hello方法
        然后url的形式就变成了:http://ServerName/index.php/hello
        注意: 定义路由规则之后，原来的URL地址将会失效，变成非法的请求。
        注意: 路由配置不支持在模块配置文件中设置。
        eg2:
            return [
                'hello/:name$' => 'index/index/hello1',
            ]
            该规则表示凡是以hello开头的并且以一个参数name结尾的url会指定到index模块的index控制器的hello1方法
        eg3:
            retrun [
                'hell0/[:name]' => ['index/index/hello',['method'=>'get','ext'=>'html']],
            ]
            该规则限制了必须是get请求，而且后缀必须是html


    6. 生成URL地址
        第一种方式：
        Url::build('blog/read','name=thinkphp');
        Url::build('blog/get',['name'=>'thinkphp','id'=>1]);
        Url::build('blog/read','name=thinkphp&id=1');
        注意：build方法的第一个参数使用路由定义中的完整路由地址
        第二种方式：使用助手函数url来简化
        url('blog/read','name=thinkphp');

    7.请求和响应
        7.1 获取当前页面的url地址（不含域名）
            第一种方式：
            $request = Request::instance();
            $url = $request->url();
            第二种方式：如果控制器继承了think\Controller类的话，可以简化
            $url = $this->request->url();
            第三种方式: 如果控制器没有继承think\Controller类，可以使用Request对象注入的方式来简化调用
            use think\Request;
            public function hello(Request $request,$name='World'){
                $url = $request->url();
            }
            第四种方式:使用助手函数request();
            $url = request()->url();
        7.2 动态属性绑定  ******************
            可以给Request请求对象绑定属性，方便全局调用，例如我们可以在公共控制器中绑定当前登录的用户模型到
            请求对象：
            请查看ThinkPHP5快速入门手册---》34-35页
        7.3 获取请求变量(查看ThinkPHP5快速入门---》38页)
            全局过滤方法的配置(application/config.php)
                'default_filter' => 'htmlspecialchars',
            第一种方式：
            public function hello(Request $request){
                //param方法
                //$id = $request -> param(['参数名称'],['默认值'],['过滤函数']);
                $request -> param();//所有的参数
                $name = $request -> param('name');//获取name
                $id = $request -> param('user_id',1,'int');
                //get方法
                $get = $request->get();
                $name = $request->get('name');
                //post方法
                $name = $request -> post('name');
                //cookie方法
                $user_id = $request -> cookie('user_id');
                //file方法
                $file = $request -> file('image');
            }
            第二种方式：使用助手函数input()简化Request对象的param方法
            $name = input('name');//获取name
            $get = input('get.');//获取GET参数
            $name = input('get.name');//获取name
            ...
            参数的优先级：路由变量 > 当前请求变量（$_POST变量） > $_GET变量
            说明：路由变量是指路由规则里面定义的变量或者 PATH_INFO 地址中的变量。路由变量无法使用get方法或者$_GET变量获取。
        7.4 获取请求参数
                获取请求方法         $request -> method();
                获取资源类型         $request -> type();
                获取ip地址           $request -> ip();
                是否是AJAX请求       $request -> isAjax();
                获取请求参数         $request -> param();
                请求参数：仅包含name $request->only(['name'])
                请求参数：排除name   $request ->except(['name']);
        7.5 获取URL信息
                获取当前域名          $request -> domain();
                入口文件              $request -> baseFile();
                当前url（不含域名）   $request -> url();
                当前url（包含域名）   $request -> url(true);
                获取当前URL地址 不含QUERY_STRING    $request -> baseUrl();
                获取URL访问的ROOT地址  $request -> root();
                获取URL访问的ROOT地址  $request->root(true);
                获取URL地址中的PATH_INFO信息    $request -> pathinfo();
                获取URL地址中的PATH_INFO信息 不含后缀  $request -> path();
                获取URL地址中的后缀信息   $request -> ext();
        7.6 获取当前模块、控制器、操作信息
                $request -> controller();
                $request -> module();
                $request -> action();
        7.7 页面重定向
                第一种方式：$this->redirect();
                第二种方式:使用助手函数redirect();

        //5. 模块文件夹的名称必须采用小写的形式

    数据模型 ************************************
        1. 数据模型的常规操作请查看ThinkPHP5.0快速入门手册的相关部分
        2. 读取器 在读取数据模型的时候，对于某些字段，例如date类型的字段，在输出的时候需要使用date函数进行转换，使用读取器
           可以简化该操作
            2.1 读取器方法的命名规范是：
                get + 属性名的驼峰命名+ Attr
                eg:
                在模型中定义一个方法
                    protected function getBirthdayAttr($birthday){
                        return date('Y-m-d',$birthday);
                    }
                在控制器中，读取该字段的时候就会字段的将birthday字段转换为'Y-m-d'的形式
            2.2 读取器还可以定义读取数据表中不存在的属性，例如把原始生日和转换的格式分开两个属性 birthday 和user_birthday ，
            我们只需定义 user_birthday 属性的读取器方法：
                eg:
                protected function getUserBirthdayAttr($value,$data){
                    return date('Y-m-d',$data['birthday']);
                }
                在控制器中：
                public function read($id){
                        $user = UserModel::get($id);
                        echo $user->id . '<br>';
                        echo $user->nickname . '<br>';
                        echo $user->email . '<br>';
                        echo $user->user_birthday . '<br>';
                }
        3. 修改器 在对模型进行新增或修改的时候，对于某些字段，例如date类型的字段，在写入之前需要对数据进行strtotime转换，
           使用修改器可以简化该操作。
           3.1 修改器的命名规范：
               set + 属性名的驼峰命名 + Attr
           3.2 在控制器中
                eg:
                 public function add(){
                        $user['nickname'] = '看风';
                        $user['email'] = 'kanwind@qq.com';
                        $user['birthday'] = '2010-04-02';  //这里使用了修改器。故省略了strtotime函数
                        if($result = UserModel::create($user)){
                            return '用户[' . $result['nickname'] . ':' .$result->id . ']新增成功';
                        }else{
                            return '新增出错';
                        }
                 }
        4. 类型转换
           对于前面的时间戳 birthday 的例子，还可以进行进一步的简化，这里需要用到类型强制转换的功能，在User 模型类中添加
           定义：
                protected $type = [
                    // 设置birthday为时间戳类型（整型）
                    'birthday' => 'timestamp:Y/m/d',
                ];
                不需要定义任何修改器和读取器，我们完成了相同的功能。
           ThinkPHP5.0支持的类型转换：查看快速入门86-87页
        5.自动时间戳
           对于固定的时间戳和时间日期型的字段，例如文章的创建时间、修改时间等字段，还有比设置类型转换更简单的方法，尤其是
           所有的数据表统一处理的话，只需要在数据库配置文件中添加设置：
               1. // 开启自动写入时间戳字段
                  'auto_timestamp' => true,//会自动去更新数据表中的cerate_time、update_time字段
               2. //如果数据表自动写入的时间戳字段不是create_time、update_time字段，则可以在相应的模型中去修改：
                  protected $createTime = 'create_at';
                  protected $updateTime = 'update_at';
               3. //如果个别数据表不需要自动写入时间戳字段，可以在相应的模型中直接关闭
                  protected $autoWriteTimestamp = false;
               4. //默认的时间戳类型是整形，如果需要使用其他的时间字段类型，可以修改模型
                  protected $autoWriteTimestamp = 'datetime';
                  //还可以在配置文件中去设置
                  'auto_timestamp' => 'datetime'
                  说明：表的字段类型也必须要是相应的类型
        6. 自动完成
           如果我们希望自动写入其他的字段，则可以使用自动完成功能。
                自动完成共有三个属性定义：
                    auto    新增及更新的时候自动完成的属性数组
                    insert  仅新增的时候自动完成的属性数组
                    update  仅更新的时候自动完成的属性数组
               1. eg:
                  //向模型中插入数据的时候，实现自动写入status字段
                  //在该模型中定义
                  protected $insert = ['status' => 1]
               2. eg:
                  //如果status属性的值不是固定的，而是需要条件判断，那么我们可以定义修改器来配合自动完成。
                  protected $insert = ['status'];
                  //修改器
                  protected function setStatusAttr($value,$data){
                       return '流年' == $data['nickname'] ? 1 : 2 ;
                  }
                  //读取器
                  protected function getStatusAttr($value){
                       $status = [-1 => '删除', 0 => '禁用', 1 => '正常', 2 => '待审核'];
                       return $status[$value];
                  }
        7. 查询范围
           对于一些常用的查询条件，我们可以封装成查询范围来进行方便的调用
               7.1 查询范围方法的定义规范为：
                        scope + 查询范围名称
                   eg:
                       //1. 在模型中定义
                       //email查询
                       protected function scopeEmail($query){
                            $query -> where('email','thinkphp@qq.com');
                       }
                       //2. 在控制器中使用
                       public function index(){
                            $list = UserModel::scope('email') -> all();
                            ...
                       }
               7.2 支持多次调用 scope 方法，并且可以追加新的查询及链式操作
               7.3 查询范围方法支持额外的参数
                   eg:
                   protected function scopeEmail($query,$email = ''){
                         $query -> where('email',$email);
                   }
                   在控制器中使用
                   $list = UserModel :: scope('email','thinkphp@qq.com') -> all();
        8. 全局查询范围
                    eg:
                    //在模型中定义
                    // 全局查询范围
                    protected static function base($query)
                    {
                        // 查询状态为1的数据
                        $query->where('status',1);
                    }
                    //控制器中使用
                    //每次查询都会自动带上全局查询范围的查询条件。
                    UserModel :: scope('email')->all();
    输入和验证 ************************************ 快速入门96页







